{"version":3,"sources":["redux/actionTypes.js","redux/actions.js","components/AddTodo.js","components/Todo.js","constants.js","redux/selectors.js","components/TodoList.js","components/VisibilityFilters.js","App.js","reportWebVitals.js","redux/reducers/visibilityFilter.js","redux/reducers/todos.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["ADD_TODO","TOGGLE_TODO","SET_FILTER","nextTodoId","AddTodo","props","updateInput","input","setState","handleAddTodo","console","log","state","addTodo","alert","className","TextField","label","margin","fullWidth","required","value","this","onChange","e","target","variant","Button","color","onClick","React","Component","connect","content","type","payload","id","toggleTodo","todo","completed","cx","VISIBILITY_FILTERS","ALL","COMPLETED","INCOMPLETE","getTodosState","store","todos","getTodos","allIds","getTodoList","map","byIds","getTodoById","visibilityFilter","allTodos","filter","getTodosByVisibilityFilter","length","index","activeFilter","setFilter","Object","keys","filterKey","currentFilter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","action","combineReducers","createStore","rootReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbb94707.chunk.js","sourcesContent":["export const ADD_TODO = \"ADD_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\nexport const SET_FILTER = \"SET_FILTER\";\r\n","import { ADD_TODO, TOGGLE_TODO, SET_FILTER } from \"./actionTypes\";\r\n\r\nlet nextTodoId = 0;\r\n\r\nexport const addTodo = content => ({\r\n  type: ADD_TODO,\r\n  payload: {\r\n    id: ++nextTodoId,\r\n    content\r\n  }\r\n});\r\n\r\nexport const toggleTodo = id => ({\r\n  type: TOGGLE_TODO,\r\n  payload: { id }\r\n});\r\n\r\nexport const setFilter = filter => ({ type: SET_FILTER, payload: { filter } });\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {addTodo} from '../redux/actions'\r\nimport { useAlert } from 'react-alert'\r\nimport { Button, TextField } from '@material-ui/core';\r\n// import './index.css'\r\n\r\nclass AddTodo extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {input:\"\"};\r\n    }\r\n\r\n    updateInput =input =>{\r\n\r\n        this.setState({input});\r\n\r\n    }\r\n\r\n    handleAddTodo =()=>{\r\n        // const alert = useAlert()\r\n        console.log(this.state.input)\r\n        this.state.input?this.props.addTodo(this.state.input):alert(\"Enter the task Todo\");\r\n        this.setState({input:\"\"});\r\n\r\n\r\n    }\r\n    render(){\r\n\r\n        return (\r\n            <div className=\"add-todo-list\"> \r\n\r\n            <TextField\r\n              label=\"Name\"\r\n              margin=\"dense\"\r\n              fullWidth\r\n              required\r\n              value={this.state.input}\r\n              onChange={e=>this.updateInput(e.target.value)}\r\n              variant=\"outlined\"\r\n            />\r\n\r\n            <Button variant=\"contained\" color=\"primary\" onClick={this.handleAddTodo} >\r\n                Add Todo\r\n            </Button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null,{addTodo})(AddTodo);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport cx from \"classnames\";\r\nimport { toggleTodo } from \"../redux/actions\";\r\n\r\nconst Todo = ({ todo, toggleTodo }) => (\r\n  <li className=\"todo-item\" onClick={() => toggleTodo(todo.id)}>\r\n    {todo && todo.completed ? \"ðŸ‘Œ\" : \"ðŸ‘‹\"}{\" \"}\r\n    <span\r\n      className={cx(\r\n        \"todo-item__text\",\r\n        todo && todo.completed && \"todo-item__text--completed\"\r\n      )}\r\n    >\r\n      {todo.content}\r\n    </span>\r\n  </li>\r\n);\r\n\r\n// export default Todo;\r\nexport default connect(\r\n  null,\r\n  { toggleTodo }\r\n)(Todo);\r\n","export const VISIBILITY_FILTERS = {\r\n    ALL: \"All\",\r\n    COMPLETED: \"Completed\",\r\n    INCOMPLETE: \"Incomplete\"\r\n  };\r\n  ","import { VISIBILITY_FILTERS } from \"../constants\";\r\n\r\nexport const getTodosState = store => store.todos;\r\n\r\nexport const getTodoList = store =>\r\n  getTodosState(store) ? getTodosState(store).allIds : [];\r\n\r\nexport const getTodoById = (store, id) =>\r\n  getTodosState(store) ? { ...getTodosState(store).byIds[id], id } : {};\r\n\r\n/**\r\n * example of a slightly more complex selector\r\n * select from store combining information from multiple reducers\r\n */\r\nexport const getTodos = store =>\r\n  getTodoList(store).map(id => getTodoById(store, id));\r\n\r\nexport const getTodosByVisibilityFilter = (store, visibilityFilter) => {\r\n  const allTodos = getTodos(store);\r\n  switch (visibilityFilter) {\r\n    case VISIBILITY_FILTERS.COMPLETED:\r\n      return allTodos.filter(todo => todo.completed);\r\n    case VISIBILITY_FILTERS.INCOMPLETE:\r\n      return allTodos.filter(todo => !todo.completed);\r\n    case VISIBILITY_FILTERS.ALL:\r\n    default:\r\n      return allTodos;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Todo from \"./Todo\";\r\n// import { getTodos } from \"../redux/selectors\";\r\nimport { getTodosByVisibilityFilter } from \"../redux/selectors\";\r\nimport { VISIBILITY_FILTERS } from \"../constants\";\r\n\r\nconst TodoList = ({ todos }) => (\r\n  <ul className=\"todo-list\">\r\n    {todos && todos.length\r\n      ? todos.map((todo, index) => {\r\n          return <Todo key={`todo-${todo.id}`} todo={todo} />;\r\n        })\r\n      : \"No todos, yay!\"}\r\n  </ul>\r\n);\r\n\r\n// const mapStateToProps = state => {\r\n//   const { byIds, allIds } = state.todos || {};\r\n//   const todos =\r\n//     allIds && state.todos.allIds.length\r\n//       ? allIds.map(id => (byIds ? { ...byIds[id], id } : null))\r\n//       : null;\r\n//   return { todos };\r\n// };\r\n\r\nconst mapStateToProps = state => {\r\n  const { visibilityFilter } = state;\r\n  const todos = getTodosByVisibilityFilter(state, visibilityFilter);\r\n  return { todos };\r\n  //   const allTodos = getTodos(state);\r\n  //   return {\r\n  //     todos:\r\n  //       visibilityFilter === VISIBILITY_FILTERS.ALL\r\n  //         ? allTodos\r\n  //         : visibilityFilter === VISIBILITY_FILTERS.COMPLETED\r\n  //           ? allTodos.filter(todo => todo.completed)\r\n  //           : allTodos.filter(todo => !todo.completed)\r\n  //   };\r\n};\r\n// export default TodoList;\r\nexport default connect(mapStateToProps)(TodoList);\r\n","import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport { connect } from \"react-redux\";\r\nimport { setFilter } from \"../redux/actions\";\r\nimport { VISIBILITY_FILTERS } from \"../constants\";\r\n\r\nconst VisibilityFilters = ({ activeFilter, setFilter }) => {\r\n  return (\r\n    <div className=\"visibility-filters\">\r\n      {Object.keys(VISIBILITY_FILTERS).map(filterKey => {\r\n        const currentFilter = VISIBILITY_FILTERS[filterKey];\r\n        return (\r\n          <span\r\n            key={`visibility-filter-${currentFilter}`}\r\n            className={cx(\r\n              \"filter\",\r\n              currentFilter === activeFilter && \"filter--active\"\r\n            )}\r\n            onClick={() => {\r\n              setFilter(currentFilter);\r\n            }}\r\n          >\r\n            {currentFilter}\r\n          </span>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { activeFilter: state.visibilityFilter };\r\n};\r\n// export default VisibilityFilters;\r\nexport default connect(\r\n  mapStateToProps,\r\n  { setFilter }\r\n)(VisibilityFilters);\r\n","import React from 'react';\nimport AddTodo from './components/AddTodo';\nimport TodoList from './components/TodoList';\nimport VisibilityFilters from './components/VisibilityFilters';\nimport './index.css';\nexport default function App(){\n\n  return(\n      <div className=\"todo-app\">\n        <h1>Todo List </h1>\n        <AddTodo />\n        <TodoList />\n        <VisibilityFilters />\n      </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { SET_FILTER } from \"../actionTypes\";\r\nimport { VISIBILITY_FILTERS } from \"../../constants\";\r\n\r\nconst initialState = VISIBILITY_FILTERS.ALL;\r\n\r\nconst visibilityFilter = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_FILTER: {\r\n      return action.payload.filter;\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default visibilityFilter;\r\n","import { ADD_TODO, TOGGLE_TODO } from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  allIds: [],\r\n  byIds: {}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TODO: {\r\n      const { id, content } = action.payload;\r\n      return {\r\n        ...state,\r\n        allIds: [...state.allIds, id],\r\n        byIds: {\r\n          ...state.byIds,\r\n          [id]: {\r\n            content,\r\n            completed: false\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case TOGGLE_TODO: {\r\n      const { id } = action.payload;\r\n      return {\r\n        ...state,\r\n        byIds: {\r\n          ...state.byIds,\r\n          [id]: {\r\n            ...state.byIds[id],\r\n            completed: !state.byIds[id].completed\r\n          }\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport visibilityFilter from \"./visibilityFilter\";\r\nimport todos from \"./todos\";\r\n\r\nexport default combineReducers({ todos, visibilityFilter });\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport default createStore(rootReducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/store'\n\n\n\nReactDOM.render(\n<Provider store={store}>\n <App />,\n</Provider>,\n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}